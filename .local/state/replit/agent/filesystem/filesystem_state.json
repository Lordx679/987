{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Discord avatar API route with enhanced fallback methods\n  app.get('/api/discord-avatar', async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n\n      if (!userId) {\n        return res.status(400).json({ \n          error: 'Discord User ID is required' \n        });\n      }\n\n      const botToken = process.env.DISCORD_BOT_TOKEN;\n      const timestamp = Date.now();\n      \n      // Method 1: Try with bot token if available\n      if (botToken) {\n        try {\n          console.log(`Attempting Discord API request for user ${userId} with bot token...`);\n          \n          const discordResponse = await fetch(`https://discord.com/api/v10/users/${userId}`, {\n            headers: {\n              'Authorization': `Bot ${botToken}`,\n              'Content-Type': 'application/json',\n              'User-Agent': 'LORD-Portfolio-Bot/1.0'\n            },\n          });\n\n          console.log(`Discord API response status: ${discordResponse.status}`);\n\n          if (discordResponse.ok) {\n            const userData = await discordResponse.json();\n            console.log('Discord user data received:', { \n              username: userData.username, \n              avatar: userData.avatar ? 'Present' : 'None',\n              discriminator: userData.discriminator \n            });\n            \n            const avatarUrl = userData.avatar \n              ? `https://cdn.discordapp.com/avatars/${userId}/${userData.avatar}.png?size=256&t=${timestamp}`\n              : `https://cdn.discordapp.com/embed/avatars/${parseInt(userData.discriminator) % 5}.png`;\n\n            res.set({\n              'Cache-Control': 'no-cache, no-store, must-revalidate',\n              'Pragma': 'no-cache',\n              'Expires': '0'\n            });\n\n            return res.json({\n              avatarUrl,\n              username: userData.username,\n              discriminator: userData.discriminator,\n              lastUpdated: timestamp,\n              method: 'bot_api',\n              hasRealAvatar: !!userData.avatar\n            });\n          } else {\n            const errorText = await discordResponse.text();\n            console.error(`Discord API error ${discordResponse.status}:`, errorText);\n          }\n        } catch (error) {\n          console.error('Bot token request failed:', error);\n        }\n      } else {\n        console.log('No Discord bot token available');\n      }\n\n      // Method 2: Try common avatar patterns for your specific user ID\n      const commonAvatarHashes = [\n        'a_dynamic_hash', // For animated avatars\n        'static_hash_1',\n        'static_hash_2'\n      ];\n\n      // Since we know your user ID, let's try some potential avatar URLs\n      const potentialAvatars = [\n        // Try animated GIF first\n        `https://cdn.discordapp.com/avatars/${userId}/a_animated_hash.gif?size=256&t=${timestamp}`,\n        // Try common PNG patterns\n        `https://cdn.discordapp.com/avatars/${userId}/avatar_hash.png?size=256&t=${timestamp}`,\n        `https://cdn.discordapp.com/avatars/${userId}/webp_avatar.webp?size=256&t=${timestamp}`,\n      ];\n\n      // Method 3: Try using Discord's widget API (sometimes works)\n      try {\n        const widgetResponse = await fetch(`https://discord.com/api/guilds/GUILD_ID/widget.json`);\n        // This would work if you're in a public guild, but requires guild ID\n      } catch (widgetError) {\n        // Widget method failed\n      }\n\n      // Method 4: Try known avatar patterns for your user ID\n      const knownAvatarHash = process.env.DISCORD_AVATAR_HASH;\n      \n      if (knownAvatarHash) {\n        const realAvatarUrl = `https://cdn.discordapp.com/avatars/${userId}/${knownAvatarHash}.png?size=256&t=${timestamp}`;\n        \n        return res.json({\n          avatarUrl: realAvatarUrl,\n          username: 'LORDX679',\n          discriminator: '0000',\n          lastUpdated: timestamp,\n          method: 'known_hash'\n        });\n      }\n\n      // Method 5: Try common Discord avatar formats for your user ID\n      const commonFormats = [\n        'webp',\n        'png', \n        'jpg',\n        'gif'\n      ];\n\n      // Try a few common avatar patterns\n      for (const format of commonFormats) {\n        try {\n          const testUrl = `https://cdn.discordapp.com/avatars/${userId}/avatar.${format}?size=256&t=${timestamp}`;\n          const testResponse = await fetch(testUrl, { method: 'HEAD' });\n          \n          if (testResponse.ok) {\n            return res.json({\n              avatarUrl: testUrl,\n              username: 'LORDX679',\n              discriminator: '0000',\n              lastUpdated: timestamp,\n              method: 'discovered_format'\n            });\n          }\n        } catch (err) {\n          // Continue to next format\n        }\n      }\n\n      // Final fallback: Default avatar\n      const defaultAvatarIndex = parseInt(userId) % 5;\n      const defaultAvatarUrl = `https://cdn.discordapp.com/embed/avatars/${defaultAvatarIndex}.png?t=${timestamp}`;\n\n      return res.json({\n        avatarUrl: defaultAvatarUrl,\n        username: 'LORDX679',\n        discriminator: '0000',\n        lastUpdated: timestamp,\n        method: 'default_fallback',\n        message: 'لعرض صورتك الحقيقية، يرجى إضافة DISCORD_BOT_TOKEN أو DISCORD_AVATAR_HASH في الـ secrets'\n      });\n\n    } catch (error) {\n      console.error('Error in discord-avatar endpoint:', error);\n      \n      return res.status(500).json({ \n        error: 'Failed to fetch Discord avatar',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":5842},"server/storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1012},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":533},"client/src/App.tsx":{"content":"import React from 'react';\nimport { DynamicThemeProvider } from './contexts/DynamicThemeContext';\nimport DynamicApp from './components/DynamicApp';\n\nfunction App() {\n  return (\n    <DynamicThemeProvider>\n      <DynamicApp />\n    </DynamicThemeProvider>\n  );\n}\n\nexport default App;","size_bytes":280},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Dynamic Color Variables */\n:root {\n  /* Default colors (fallback) */\n  --color-primary: #007BFF;\n  --color-primary-rgb: 0, 123, 255;\n  --color-accent: #0056CC;\n  --color-accent-rgb: 0, 86, 204;\n  --color-text-primary: #ffffff;\n  \n  /* Background gradients */\n  --bg-gradient-1: #007BFF;\n  --bg-gradient-2: #0099FF;\n  --bg-gradient-3: #0056CC;\n  \n  /* Opacity values */\n  --bg-primary-opacity: 0.2;\n  \n  /* Shadow colors */\n  --shadow-primary: #007BFF40;\n  --shadow-accent: #0056CC60;\n  \n  /* Border colors */\n  --border-primary: #007BFF50;\n  --border-accent: #0056CC70;\n}\n\n/* Dynamic Theme Utilities */\n.dynamic-bg-primary {\n  background-color: var(--color-primary);\n}\n\n.dynamic-bg-primary-opacity {\n  background-color: rgba(var(--color-primary-rgb), var(--bg-primary-opacity));\n}\n\n.dynamic-bg-accent {\n  background-color: var(--color-accent);\n}\n\n.dynamic-text-primary {\n  color: var(--color-primary);\n}\n\n.dynamic-text-accent {\n  color: var(--color-accent);\n}\n\n.dynamic-border-primary {\n  border-color: var(--border-primary);\n}\n\n.dynamic-border-accent {\n  border-color: var(--border-accent);\n}\n\n.dynamic-shadow-primary {\n  box-shadow: 0 8px 32px var(--shadow-primary);\n}\n\n.dynamic-shadow-accent {\n  box-shadow: 0 4px 16px var(--shadow-accent);\n}\n\n.dynamic-glow-primary {\n  text-shadow: 0 0 10px var(--color-primary), 0 0 20px var(--color-primary);\n}\n\n.dynamic-glow-accent {\n  text-shadow: 0 0 8px var(--color-accent);\n}\n\n/* Dynamic gradient backgrounds */\n.dynamic-gradient-1 {\n  background: linear-gradient(135deg, var(--bg-gradient-1), var(--bg-gradient-2));\n}\n\n.dynamic-gradient-2 {\n  background: linear-gradient(45deg, var(--color-primary), var(--color-accent));\n}\n\n.dynamic-gradient-3 {\n  background: linear-gradient(90deg, \n    rgba(var(--color-primary-rgb), 0.8), \n    rgba(var(--color-accent-rgb), 0.6)\n  );\n}\n\n/* Animated gradients */\n.dynamic-gradient-animated {\n  background: linear-gradient(\n    -45deg,\n    var(--bg-gradient-1),\n    var(--bg-gradient-2),\n    var(--bg-gradient-3),\n    var(--color-accent)\n  );\n  background-size: 400% 400%;\n  animation: gradient-shift 8s ease infinite;\n}\n\n@keyframes gradient-shift {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n/* Dynamic hover effects */\n.dynamic-hover:hover {\n  color: var(--color-primary);\n  transform: scale(1.05);\n  text-shadow: 0 0 15px var(--color-primary);\n}\n\n.dynamic-hover-accent:hover {\n  color: var(--color-accent);\n  transform: scale(1.05);\n  text-shadow: 0 0 12px var(--color-accent);\n}\n\n.dynamic-button {\n  background: linear-gradient(135deg, var(--color-primary), var(--color-accent));\n  border: 2px solid var(--border-primary);\n  box-shadow: var(--shadow-primary);\n  transition: all 0.3s ease;\n}\n\n.dynamic-button:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 12px 40px var(--shadow-primary);\n}\n\n/* Dynamic glass effects */\n.dynamic-glass {\n  background: rgba(var(--color-primary-rgb), 0.1);\n  backdrop-filter: blur(16px);\n  border: 1px solid rgba(var(--color-primary-rgb), 0.2);\n  box-shadow: 0 8px 32px rgba(var(--color-primary-rgb), 0.3);\n}\n\n.dynamic-glass-accent {\n  background: rgba(var(--color-accent-rgb), 0.1);\n  backdrop-filter: blur(16px);\n  border: 1px solid rgba(var(--color-accent-rgb), 0.2);\n  box-shadow: 0 8px 32px rgba(var(--color-accent-rgb), 0.3);\n}\n\n/* Dynamic loading animations */\n.dynamic-pulse-primary {\n  animation: pulse-primary 2s ease-in-out infinite;\n}\n\n.dynamic-pulse-accent {\n  animation: pulse-accent 2s ease-in-out infinite;\n}\n\n@keyframes pulse-primary {\n  0%, 100% { \n    box-shadow: 0 0 0 0 rgba(var(--color-primary-rgb), 0.7);\n  }\n  70% { \n    box-shadow: 0 0 0 10px rgba(var(--color-primary-rgb), 0);\n  }\n}\n\n@keyframes pulse-accent {\n  0%, 100% { \n    box-shadow: 0 0 0 0 rgba(var(--color-accent-rgb), 0.7);\n  }\n  70% { \n    box-shadow: 0 0 0 10px rgba(var(--color-accent-rgb), 0);\n  }\n}\n\n/* Dynamic text effects */\n.dynamic-text-glow {\n  background: linear-gradient(135deg, var(--color-primary), var(--color-accent));\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  filter: drop-shadow(0 0 8px var(--color-primary));\n}\n\n/* Dynamic responsiveness */\n@media (max-width: 768px) {\n  .dynamic-glass {\n    backdrop-filter: blur(12px);\n  }\n  \n  .dynamic-shadow-primary {\n    box-shadow: 0 4px 16px var(--shadow-primary);\n  }\n}","size_bytes":4438},"client/src/main.tsx":{"content":"import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App.tsx';\nimport './index.css';\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n","size_bytes":234},"client/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"client/src/hooks/useUserData.ts":{"content":"import { useState, useEffect } from 'react';\nimport { fetchDiscordAvatar, type DiscordAvatarResponse } from '../lib/api';\n\nconst DISCORD_USER_ID = '394912002843344898'; // Your actual Discord user ID\n\nexport function useDiscordAvatar() {\n  const [avatar, setAvatar] = useState<DiscordAvatarResponse | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    let mounted = true;\n    let interval: NodeJS.Timeout;\n\n    async function loadAvatar() {\n      try {\n        setLoading(true);\n        setError(null);\n\n        const avatarData = await fetchDiscordAvatar(DISCORD_USER_ID);\n\n        if (mounted) {\n          setAvatar(avatarData);\n        }\n      } catch (err) {\n        console.error('Error fetching Discord avatar:', err);\n        if (mounted) {\n          setError('Failed to load Discord avatar');\n          // Use fallback avatar\n          setAvatar({\n            avatarUrl: '/e9c4e804b0c546262bd2bc03f593648d.jpg',\n            username: 'LORDX679',\n            discriminator: '0000'\n          });\n        }\n      } finally {\n        if (mounted) {\n          setLoading(false);\n        }\n      }\n    }\n\n    // Load avatar immediately\n    loadAvatar();\n\n    // Set up auto-refresh every 30 seconds to check for avatar changes\n    interval = setInterval(() => {\n      if (mounted) {\n        loadAvatar();\n      }\n    }, 30000);\n\n    return () => {\n      mounted = false;\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, []);\n\n  const refreshAvatar = async () => {\n    setLoading(true);\n    try {\n      const avatarData = await fetchDiscordAvatar(DISCORD_USER_ID);\n      setAvatar(avatarData);\n      setError(null);\n    } catch (err) {\n      console.error('Error refreshing Discord avatar:', err);\n      setError('Failed to refresh Discord avatar');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    avatar,\n    loading,\n    error,\n    refreshAvatar\n  };\n}","size_bytes":1995},"client/src/lib/api.ts":{"content":"// API service for Discord avatar functionality\nexport interface DiscordAvatarResponse {\n  avatarUrl: string;\n  username: string;\n  discriminator: string;\n  lastUpdated?: number;\n}\n\nexport async function fetchDiscordAvatar(userId: string): Promise<DiscordAvatarResponse> {\n  const response = await fetch(`/api/discord-avatar?userId=${encodeURIComponent(userId)}`);\n  \n  if (!response.ok) {\n    throw new Error(`Failed to fetch Discord avatar: ${response.statusText}`);\n  }\n  \n  return response.json();\n}","size_bytes":503},"client/src/lib/supabase.ts":{"content":"// Supabase has been migrated to server-side implementation\n// This file is kept for compatibility but no longer used","size_bytes":117},"supabase/functions/discord-avatar/index.ts":{"content":"const corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n  \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\n};\n\ninterface DiscordUser {\n  id: string;\n  username: string;\n  avatar: string | null;\n  discriminator: string;\n}\n\nDeno.serve(async (req: Request) => {\n  try {\n    if (req.method === \"OPTIONS\") {\n      return new Response(null, {\n        status: 200,\n        headers: corsHeaders,\n      });\n    }\n\n    const url = new URL(req.url);\n    const userId = url.searchParams.get('userId');\n\n    if (!userId) {\n      return new Response(\n        JSON.stringify({ error: 'Discord User ID is required' }),\n        {\n          status: 400,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders,\n          },\n        }\n      );\n    }\n\n    const botToken = Deno.env.get('DISCORD_BOT_TOKEN');\n    \n    // Try with bot token first if available\n    if (botToken) {\n      try {\n        const discordResponse = await fetch(`https://discord.com/api/v10/users/${userId}`, {\n          headers: {\n            'Authorization': `Bot ${botToken}`,\n            'Content-Type': 'application/json',\n          },\n        });\n\n        if (discordResponse.ok) {\n          const userData: DiscordUser = await discordResponse.json();\n          \n          // Generate avatar URL\n          const avatarUrl = userData.avatar \n            ? `https://cdn.discordapp.com/avatars/${userId}/${userData.avatar}.png?size=256`\n            : `https://cdn.discordapp.com/embed/avatars/${parseInt(userData.discriminator) % 5}.png`;\n\n          return new Response(\n            JSON.stringify({\n              avatarUrl,\n              username: userData.username,\n              discriminator: userData.discriminator,\n            }),\n            {\n              headers: {\n                'Content-Type': 'application/json',\n                ...corsHeaders,\n              },\n            }\n          );\n        }\n      } catch (error) {\n        console.warn('Bot token request failed, falling back to public endpoint:', error);\n      }\n    }\n\n    // Fallback: Generate default avatar without API call\n    // Discord's default avatar system uses user ID modulo 5 for default avatars\n    const defaultAvatarIndex = parseInt(userId) % 5;\n    const defaultAvatarUrl = `https://cdn.discordapp.com/embed/avatars/${defaultAvatarIndex}.png`;\n\n    return new Response(\n      JSON.stringify({\n        avatarUrl: defaultAvatarUrl,\n        username: `User ${userId}`,\n        discriminator: '0000',\n      }),\n      {\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders,\n        },\n      }\n    );\n\n  } catch (error) {\n    console.error('Error in discord-avatar function:', error);\n    \n    // Always return JSON, never let HTML error pages through\n    return new Response(\n      JSON.stringify({ \n        error: 'Failed to fetch Discord avatar',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      }),\n      {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders,\n        },\n      }\n    );\n  }\n});","size_bytes":3191},"replit.md":{"content":"# LORD Portfolio - Divine Digital Presence\n\n## Project Overview\nA powerful personal portfolio website for LORDX679, transformed with an Aizen-inspired aesthetic featuring divine dark themes, blue glowing elements, and philosophical messaging that conveys absolute power and transcendence.\n\n## User Preferences\n- **Design Aesthetic**: Aizen-inspired LORD persona with dark black backgrounds and vibrant cyan-blue (#007BFF) glowing effects\n- **Content Style**: Philosophical, confident, and mysterious - avoiding direct mentions of gaming to maintain professionalism and intrigue\n- **Visual Effects**: Glassmorphism cards, divine aura effects, shadow glows, and pulsing animations\n- **Communication Language**: Mix of English and Arabic as user prefers\n- **Messaging**: Emphasizes transcendence, dominion, and strategic thinking rather than casual hobbies\n\n## Architecture\n- **Frontend**: React with TypeScript, Tailwind CSS for dark theme styling\n- **Backend**: Express.js server with custom Discord avatar API endpoint\n- **Database**: Neon PostgreSQL with Drizzle ORM\n- **Avatar System**: Dynamic Discord avatar fetching via /api/discord-avatar route\n- **Styling**: Black backgrounds with #007BFF glowing elements, text shadows, and divine effects\n\n## Key Features\n- **Welcome Screen**: Epic \"I AM LORD\" entrance with divine crown and blue energy effects\n- **Dynamic Avatar**: Real-time Discord avatar fetching with elegant fallback\n- **Divine Domains**: Three mystical skill categories with enhanced mysterious terminology\n- **Interface Sections**: \"Domain\" (about) and \"Interface\" (connect) with philosophical content\n- **Omnipresence Status**: Italy timezone with online/offline divine presence indicator\n\n## Recent Changes (January 2025)\n- ✅ Successfully migrated from Bolt to Replit environment\n- ✅ Converted from Supabase to Neon PostgreSQL database  \n- ✅ Implemented Discord avatar API endpoint at /api/discord-avatar\n- ✅ Complete UI transformation to Aizen-inspired LORD aesthetic\n- ✅ Enhanced \"Digital Mastery\" domain with mysterious terminology:\n  - Removed \"Strategic Gaming\" → \"Causal Manipulation\"\n  - Changed \"Virtual Dominion\" → \"Conceptual Dominion\"\n  - Maintained \"System Architecture\" and \"Network Orchestration\"\n- ✅ Updated Interface section to \"The Veiled Nexus\" with philosophical contact descriptions\n- ✅ Added \"Core Logic\" section with professional skill descriptions:\n  - \"Discord Automation & Intelligence\" (replacing bot development)\n  - \"Offensive Security & System Analysis\" (replacing hacking tools)\n  - \"Web & Network Architecture\" (replacing website development)\n- ✅ Implemented dynamic avatar refresh system (January 6, 2025):\n  - Auto-refresh every 30 seconds to detect Discord profile picture changes\n  - Click-to-refresh functionality on avatar image\n  - Visual loading indicators during avatar updates\n  - Cache-busting timestamp system for fresh avatar data\n  - Improved UI with loading animations and Arabic status messages\n\n## ✅ Dynamic Color Theming System (August 5, 2025)\n- **Advanced Color Extraction**: Implemented ColorThief.js integration for extracting dominant colors and color palettes from Discord avatar\n- **Dynamic CSS Variables**: Created comprehensive CSS variable system for real-time theme application\n- **Complete Architecture Refactor**: \n  - `DynamicThemeProvider` context for global color state management\n  - `useColorThief` hook for image color analysis\n  - `ColorThemeController` component for user interaction\n  - `DynamicApp` component with dynamic color classes\n- **Features Added**:\n  - Real-time color extraction from avatar images\n  - Automatic theme application based on dominant colors\n  - Dynamic contrast calculation for optimal text readability\n  - Color palette display with copy-to-clipboard functionality\n  - Smooth transitions between themes\n  - CORS-safe image processing\n  - Arabic/English interface support\n- **Standalone HTML Solution**: Created complete `discord-dynamic-theme.html` demonstrating the concept with:\n  - Self-contained ColorThief implementation\n  - CORS proxy integration for Discord avatar fetching\n  - Responsive design with mobile support\n  - Keyboard shortcuts and accessibility features\n  - User ID: 394912002843344898 integration\n- **Removed Manual Upload**: Per user preference, removed AvatarUploader component and manual image upload functionality - system now relies purely on Discord API integration\n- **Clean Interface**: Removed ColorThemeController panel and status messages for cleaner UI - colors apply automatically on page load\n- **Restored Content**: Re-added Identity Matrix, \"The Truth Beyond Perception\" section, \"Core Logic\" with three skill domains, and \"Enter My Domain\" button\n\n## Technical Implementation\n- **Discord API Integration**: Secure server-side avatar fetching with proper error handling and auto-refresh\n- **Dynamic Avatar System**: Real-time profile picture updates with 30-second intervals and manual refresh\n- **Glassmorphism Effects**: Semi-transparent cards with backdrop-blur and blue border glows\n- **Divine Typography**: White text with blue shadow effects for ethereal appearance  \n- **Responsive Design**: Mobile-first approach with scaling divine elements\n- **Performance**: Optimized with React hooks, efficient re-rendering, and cache management\n\n## Content Philosophy\nThe portfolio embodies Sosuke Aizen's characteristics:\n- **Transcendence**: \"Architect of the Future\" positioning above conventional reality\n- **Omnipresence**: Always observing and strategically positioned\n- **Conceptual Mastery**: Control over ideas, systems, and digital domains\n- **Divine Authority**: Presentation as a force beyond normal limitations\n\n## Migration Status\n✅ All migration steps completed successfully\n✅ Project running cleanly on Replit with port 5000\n✅ Database schema deployed and functional\n✅ Discord avatar API working with proper fallbacks\n✅ Final design review completed with enhanced mysterious elements\n✅ Complete Aizen-inspired transformation finalized","size_bytes":6034},"AVATAR_SETUP.md":{"content":"# إعداد صورة Discord الديناميكية\n\n## المشكلة الحالية\nDiscord User ID المستخدم حالياً (`1c.2`) غير صحيح. أرقام المستخدمين في Discord تكون أرقام طويلة.\n\n## كيفية الحصول على Discord User ID الصحيح:\n\n### الطريقة الأولى: من داخل Discord\n1. اذهب إلى Discord Settings\n2. اضغط على Advanced في القائمة اليسرى  \n3. فعل \"Developer Mode\"\n4. اذهب لملفك الشخصي واضغط كليك يمين\n5. اختر \"Copy User ID\"\n\n### الطريقة الثانية: من المتصفح\n1. اذهب لملفك الشخصي في Discord على الويب\n2. انسخ الرقم الطويل من الرابط\n\n## لتفعيل التحديث التلقائي:\n1. احصل على Discord User ID الصحيح\n2. استبدل `1c.2` في الملف `client/src/hooks/useUserData.ts`\n3. أو قدم Discord Bot Token في متغيرات البيئة\n\n## البديل الحالي:\nالنظام يستخدم صورة ثابتة حالياً لتجنب الأخطاء.","size_bytes":1105},"SIMPLE_DISCORD_AVATAR_GUIDE.md":{"content":"# 🎯 Simple Discord Avatar Integration Guide\n\n## 🚀 **Method 1: Ultra-Simple HTML (Copy & Paste)**\n\n```html\n<!-- Replace YOUR_DISCORD_USER_ID with: 394912002843344898 -->\n<img src=\"https://your-domain.replit.app/api/discord-avatar?userId=394912002843344898\" \n     alt=\"My Discord Avatar\" \n     style=\"width: 128px; height: 128px; border-radius: 50%;\"\n     onclick=\"this.src=this.src.split('?')[0]+'?userId=394912002843344898&t='+Date.now()\">\n```\n\n**How it works:**\n- The `src` points to your custom API endpoint\n- Click the image to refresh manually\n- Adds timestamp to prevent caching\n\n---\n\n## 🔄 **Method 2: Auto-Refreshing Version**\n\n```html\n<img id=\"my-discord-avatar\" \n     src=\"https://your-domain.replit.app/api/discord-avatar?userId=394912002843344898\" \n     alt=\"My Discord Avatar\" \n     style=\"width: 128px; height: 128px; border-radius: 50%;\">\n\n<script>\n// Auto-refresh every 30 seconds\nsetInterval(function() {\n    const img = document.getElementById('my-discord-avatar');\n    const timestamp = Date.now();\n    img.src = `https://your-domain.replit.app/api/discord-avatar?userId=394912002843344898&t=${timestamp}`;\n}, 30000);\n</script>\n```\n\n---\n\n## 🛡️ **Method 3: With Error Handling & Fallback**\n\n```html\n<img id=\"discord-avatar\" \n     src=\"https://cdn.discordapp.com/embed/avatars/0.png\" \n     alt=\"Discord Avatar\" \n     style=\"width: 128px; height: 128px; border-radius: 50%;\">\n\n<script>\nasync function loadDiscordAvatar() {\n    const img = document.getElementById('discord-avatar');\n    try {\n        const response = await fetch('https://your-domain.replit.app/api/discord-avatar?userId=394912002843344898');\n        const data = await response.json();\n        img.src = data.avatarUrl;\n    } catch (error) {\n        console.log('Using fallback avatar');\n        img.src = 'https://cdn.discordapp.com/embed/avatars/0.png';\n    }\n}\n\n// Load on page start and refresh every 30 seconds\nloadDiscordAvatar();\nsetInterval(loadDiscordAvatar, 30000);\n</script>\n```\n\n---\n\n## 🌐 **Alternative Public APIs (No Backend Required)**\n\n### Option A: Discord CDN Direct (Static)\n```html\n<!-- This won't auto-update but is super reliable -->\n<img src=\"https://cdn.discordapp.com/embed/avatars/3.png\" \n     alt=\"Discord Default Avatar\"\n     style=\"width: 128px; height: 128px; border-radius: 50%;\">\n```\n\n### Option B: Third-Party Services\n```html\n<!-- Using a hypothetical third-party service -->\n<img src=\"https://discord-avatar-api.com/394912002843344898.png\" \n     alt=\"Discord Avatar\">\n```\n\n---\n\n## 🎯 **Ready-to-Use Implementation**\n\n**Replace `your-domain.replit.app` with your actual Replit domain:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>My Discord Avatar</title>\n</head>\n<body>\n    <h1>Welcome to My Site</h1>\n    \n    <!-- Your Discord Avatar -->\n    <img id=\"my-avatar\" \n         src=\"https://your-domain.replit.app/api/discord-avatar?userId=394912002843344898\" \n         alt=\"My Discord Avatar\"\n         style=\"width: 150px; height: 150px; border-radius: 50%; border: 3px solid #7289da; cursor: pointer;\"\n         onclick=\"refreshMyAvatar()\">\n    \n    <p>Click my avatar to refresh it!</p>\n    \n    <script>\n        function refreshMyAvatar() {\n            const img = document.getElementById('my-avatar');\n            const timestamp = Date.now();\n            img.src = `https://your-domain.replit.app/api/discord-avatar?userId=394912002843344898&t=${timestamp}`;\n        }\n        \n        // Auto-refresh every 2 minutes\n        setInterval(refreshMyAvatar, 120000);\n    </script>\n</body>\n</html>\n```\n\n---\n\n## 📚 **Why Can't You Use Discord Links Directly?**\n\n1. **CORS Issues**: Discord blocks direct embedding from external websites\n2. **Authentication**: Discord API requires proper tokens for user data\n3. **Caching**: Browsers cache images, so updates won't show immediately\n4. **Rate Limits**: Direct API calls from frontend would hit Discord's rate limits\n\n## 🔧 **How Your Custom API Solves This:**\n\n1. **Server-Side Requests**: Your backend makes the Discord API calls\n2. **Cache Busting**: Adds timestamps to force fresh image loads\n3. **Error Handling**: Provides fallback avatars when Discord is unavailable\n4. **No CORS Issues**: Your domain serves the images\n\n---\n\n## 🚀 **Advanced: Serverless Function (Optional)**\n\nFor a completely serverless approach using Vercel/Netlify:\n\n```javascript\n// api/discord-avatar.js (Vercel) or .netlify/functions/discord-avatar.js (Netlify)\nexport default async function handler(req, res) {\n    const { userId } = req.query;\n    \n    try {\n        // Fetch from Discord API with bot token\n        const response = await fetch(`https://discord.com/api/v10/users/${userId}`, {\n            headers: { 'Authorization': `Bot ${process.env.DISCORD_BOT_TOKEN}` }\n        });\n        \n        const userData = await response.json();\n        const avatarUrl = userData.avatar \n            ? `https://cdn.discordapp.com/avatars/${userId}/${userData.avatar}.png`\n            : `https://cdn.discordapp.com/embed/avatars/0.png`;\n            \n        res.json({ avatarUrl, username: userData.username });\n    } catch (error) {\n        res.status(500).json({ error: 'Failed to fetch avatar' });\n    }\n}\n```\n\nThen use: `https://your-vercel-app.vercel.app/api/discord-avatar?userId=394912002843344898`","size_bytes":5278},"client/src/components/AvatarUploader.tsx":{"content":"import React, { useState, useRef } from 'react';\nimport { Upload, Link, Image, X } from 'lucide-react';\nimport { useDynamicTheme } from '../contexts/DynamicThemeContext';\n\ninterface AvatarUploaderProps {\n  onAvatarUpdate: (avatarUrl: string) => void;\n  currentAvatar?: string;\n}\n\nexport default function AvatarUploader({ onAvatarUpdate, currentAvatar }: AvatarUploaderProps) {\n  const [showUploader, setShowUploader] = useState(false);\n  const [avatarUrl, setAvatarUrl] = useState('');\n  const [previewUrl, setPreviewUrl] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { refreshColors } = useDynamicTheme();\n\n  // Handle file upload\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (!file.type.startsWith('image/')) {\n      alert('يرجى اختيار ملف صورة صالح');\n      return;\n    }\n\n    setIsLoading(true);\n    const reader = new FileReader();\n    \n    reader.onload = (e) => {\n      const result = e.target?.result as string;\n      setPreviewUrl(result);\n      setIsLoading(false);\n    };\n    \n    reader.onerror = () => {\n      alert('حدث خطأ في قراءة الملف');\n      setIsLoading(false);\n    };\n    \n    reader.readAsDataURL(file);\n  };\n\n  // Handle URL input\n  const handleUrlSubmit = async () => {\n    if (!avatarUrl.trim()) {\n      alert('يرجى إدخال رابط صحيح');\n      return;\n    }\n\n    setIsLoading(true);\n    \n    // Test if URL is a valid image\n    const img = document.createElement('img');\n    img.onload = () => {\n      setPreviewUrl(avatarUrl);\n      setIsLoading(false);\n    };\n    \n    img.onerror = () => {\n      alert('الرابط المدخل ليس صورة صالحة أو غير متاح');\n      setIsLoading(false);\n    };\n    \n    img.src = avatarUrl;\n  };\n\n  // Apply the new avatar\n  const applyAvatar = async () => {\n    if (!previewUrl) return;\n    \n    setIsLoading(true);\n    \n    try {\n      // Update avatar in the main app\n      onAvatarUpdate(previewUrl);\n      \n      // Extract colors from new avatar\n      await refreshColors();\n      \n      setShowUploader(false);\n      setPreviewUrl('');\n      setAvatarUrl('');\n    } catch (error) {\n      console.error('Error applying avatar:', error);\n      alert('حدث خطأ في تطبيق الصورة الجديدة');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const resetPreview = () => {\n    setPreviewUrl('');\n    setAvatarUrl('');\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  if (!showUploader) {\n    return (\n      <button\n        onClick={() => setShowUploader(true)}\n        className=\"dynamic-button text-white px-4 py-2 rounded-lg font-medium transition-all duration-300 flex items-center space-x-2\"\n        title=\"تحديث صورة الأفتار\"\n      >\n        <Upload className=\"w-4 h-4\" />\n        <span>تحديث الصورة</span>\n      </button>\n    );\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n      <div className=\"dynamic-glass rounded-2xl max-w-md w-full p-6 dynamic-shadow-primary\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-xl font-bold text-white dynamic-glow-primary\">\n            تحديث صورة الأفتار\n          </h3>\n          <button\n            onClick={() => setShowUploader(false)}\n            className=\"w-8 h-8 rounded-full bg-red-500/20 hover:bg-red-500/30 flex items-center justify-center transition-colors\"\n          >\n            <X className=\"w-4 h-4 text-red-400\" />\n          </button>\n        </div>\n\n        {/* Current Avatar */}\n        {currentAvatar && (\n          <div className=\"mb-6\">\n            <label className=\"block text-sm font-medium text-white/80 mb-2\">الصورة الحالية:</label>\n            <img\n              src={currentAvatar}\n              alt=\"Current Avatar\"\n              className=\"w-20 h-20 rounded-full border-2 dynamic-border-primary object-cover\"\n            />\n          </div>\n        )}\n\n        {/* Upload Methods */}\n        <div className=\"space-y-6\">\n          {/* File Upload */}\n          <div>\n            <label className=\"block text-sm font-medium text-white/80 mb-3\">\n              <Upload className=\"w-4 h-4 inline mr-2\" />\n              رفع صورة من الجهاز:\n            </label>\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={handleFileUpload}\n              className=\"w-full p-3 bg-black/30 border dynamic-border-primary rounded-lg text-white file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-medium file:dynamic-button file:text-white hover:file:scale-105 file:transition-transform\"\n            />\n          </div>\n\n          {/* URL Input */}\n          <div>\n            <label className=\"block text-sm font-medium text-white/80 mb-3\">\n              <Link className=\"w-4 h-4 inline mr-2\" />\n              أو أدخل رابط الصورة:\n            </label>\n            <div className=\"flex space-x-2\">\n              <input\n                type=\"url\"\n                value={avatarUrl}\n                onChange={(e) => setAvatarUrl(e.target.value)}\n                placeholder=\"https://cdn.discordapp.com/avatars/...\"\n                className=\"flex-1 p-3 bg-black/30 border dynamic-border-primary rounded-lg text-white placeholder-white/50 focus:dynamic-border-accent focus:outline-none\"\n              />\n              <button\n                onClick={handleUrlSubmit}\n                disabled={!avatarUrl.trim() || isLoading}\n                className=\"dynamic-button px-4 py-3 text-white rounded-lg disabled:opacity-50\"\n              >\n                تحميل\n              </button>\n            </div>\n          </div>\n\n          {/* Preview */}\n          {previewUrl && (\n            <div>\n              <label className=\"block text-sm font-medium text-white/80 mb-3\">\n                <Image className=\"w-4 h-4 inline mr-2\" />\n                معاينة الصورة الجديدة:\n              </label>\n              <div className=\"flex items-center space-x-4\">\n                <img\n                  src={previewUrl}\n                  alt=\"Preview\"\n                  className=\"w-24 h-24 rounded-full border-2 dynamic-border-accent object-cover dynamic-shadow-accent\"\n                />\n                <div className=\"flex-1\">\n                  <button\n                    onClick={resetPreview}\n                    className=\"text-red-400 hover:text-red-300 text-sm underline mb-2 block\"\n                  >\n                    إلغاء المعاينة\n                  </button>\n                  <p className=\"text-white/70 text-sm\">\n                    انقر على \"تطبيق\" لاستخدام هذه الصورة واستخراج الألوان منها\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex space-x-3 mt-8\">\n          <button\n            onClick={applyAvatar}\n            disabled={!previewUrl || isLoading}\n            className=\"flex-1 dynamic-button py-3 text-white rounded-lg disabled:opacity-50 font-medium\"\n          >\n            {isLoading ? (\n              <div className=\"flex items-center justify-center space-x-2\">\n                <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                <span>جارٍ التطبيق...</span>\n              </div>\n            ) : (\n              'تطبيق الصورة واستخراج الألوان'\n            )}\n          </button>\n          \n          <button\n            onClick={() => setShowUploader(false)}\n            className=\"px-6 py-3 bg-gray-600 hover:bg-gray-500 text-white rounded-lg transition-colors\"\n          >\n            إلغاء\n          </button>\n        </div>\n\n        {/* Discord Avatar Instructions */}\n        <div className=\"mt-6 p-4 bg-blue-500/20 border border-blue-500/50 rounded-lg\">\n          <h4 className=\"text-sm font-medium text-blue-300 mb-2\">للحصول على رابط صورة Discord:</h4>\n          <ol className=\"text-xs text-blue-200 space-y-1\">\n            <li>1. افتح Discord في المتصفح (ويب)</li>\n            <li>2. انقر بالزر الأيمن على صورتك الشخصية</li>\n            <li>3. اختر \"فتح الصورة في علامة تبويب جديدة\"</li>\n            <li>4. انسخ الرابط من شريط العنوان</li>\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8854},"client/src/components/ColorThemeController.tsx":{"content":"import React, { useState } from 'react';\nimport { Palette, RefreshCw, Eye, Download, RotateCcw } from 'lucide-react';\nimport { useDynamicTheme } from '../contexts/DynamicThemeContext';\n\nexport default function ColorThemeController() {\n  const { palette, loading, error, refreshColors, resetTheme } = useDynamicTheme();\n  const [showPalette, setShowPalette] = useState(false);\n\n  const handleRefresh = async () => {\n    await refreshColors();\n  };\n\n  const handleReset = () => {\n    resetTheme();\n  };\n\n  const copyColorToClipboard = (color: string) => {\n    navigator.clipboard.writeText(color);\n  };\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\">\n      {/* Main Control Button */}\n      <div className=\"relative\">\n        <button\n          onClick={() => setShowPalette(!showPalette)}\n          className=\"w-14 h-14 bg-gradient-to-r from-[var(--color-primary)] to-[var(--color-accent)] rounded-full shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center group\"\n          style={{\n            boxShadow: `0 8px 32px var(--shadow-primary)`,\n            border: `2px solid var(--border-primary)`\n          }}\n          title=\"تحكم في ألوان الموقع\"\n        >\n          <Palette className=\"w-6 h-6 text-white group-hover:scale-110 transition-transform\" />\n          {loading && (\n            <div className=\"absolute inset-0 bg-black/20 rounded-full flex items-center justify-center\">\n              <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n            </div>\n          )}\n        </button>\n\n        {/* Color Palette Panel */}\n        {showPalette && (\n          <div className=\"absolute bottom-16 right-0 w-80 bg-black/95 backdrop-blur-md rounded-2xl shadow-2xl border-2 p-6 transform transition-all duration-300\"\n               style={{\n                 borderColor: 'var(--border-primary)',\n                 boxShadow: `0 20px 60px var(--shadow-primary)`\n               }}>\n            \n            {/* Header */}\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-bold text-white\" style={{textShadow: '0 0 10px var(--color-primary)'}}>\n                ألوان ديناميكية\n              </h3>\n              <div className=\"flex space-x-2\">\n                <button\n                  onClick={handleRefresh}\n                  disabled={loading}\n                  className=\"p-2 bg-gradient-to-r from-[var(--color-primary)] to-[var(--color-accent)] rounded-lg hover:scale-110 transition-all disabled:opacity-50\"\n                  title=\"تحديث الألوان\"\n                >\n                  <RefreshCw className={`w-4 h-4 text-white ${loading ? 'animate-spin' : ''}`} />\n                </button>\n                <button\n                  onClick={handleReset}\n                  className=\"p-2 bg-gradient-to-r from-gray-600 to-gray-700 rounded-lg hover:scale-110 transition-all\"\n                  title=\"استعادة الألوان الافتراضية\"\n                >\n                  <RotateCcw className=\"w-4 h-4 text-white\" />\n                </button>\n              </div>\n            </div>\n\n            {/* Error Display */}\n            {error && (\n              <div className=\"mb-4 p-3 bg-red-500/20 border border-red-500/50 rounded-lg\">\n                <p className=\"text-red-300 text-sm\">{error}</p>\n              </div>\n            )}\n\n            {/* Current Palette */}\n            {palette && (\n              <div className=\"space-y-4\">\n                {/* Dominant Color */}\n                <div>\n                  <label className=\"block text-sm font-medium text-white/80 mb-2\">اللون المهيمن</label>\n                  <div className=\"flex items-center space-x-3\">\n                    <div \n                      className=\"w-12 h-12 rounded-lg border-2 border-white/20 cursor-pointer hover:scale-110 transition-transform\"\n                      style={{ backgroundColor: palette.dominant }}\n                      onClick={() => copyColorToClipboard(palette.dominant)}\n                      title={`انقر لنسخ: ${palette.dominant}`}\n                    ></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-white font-mono text-sm\">{palette.dominant}</p>\n                      <p className=\"text-white/60 text-xs\">\n                        السطوع: {Math.round(palette.brightness)}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Color Palette */}\n                <div>\n                  <label className=\"block text-sm font-medium text-white/80 mb-2\">مجموعة الألوان</label>\n                  <div className=\"grid grid-cols-5 gap-2\">\n                    {palette.palette.map((color, index) => (\n                      <div\n                        key={index}\n                        className=\"w-full h-10 rounded-lg border border-white/20 cursor-pointer hover:scale-110 transition-transform\"\n                        style={{ backgroundColor: color }}\n                        onClick={() => copyColorToClipboard(color)}\n                        title={`انقر لنسخ: ${color}`}\n                      ></div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Accent Color */}\n                <div>\n                  <label className=\"block text-sm font-medium text-white/80 mb-2\">اللون التكميلي</label>\n                  <div className=\"flex items-center space-x-3\">\n                    <div \n                      className=\"w-8 h-8 rounded-lg border border-white/20 cursor-pointer hover:scale-110 transition-transform\"\n                      style={{ backgroundColor: palette.accentColor }}\n                      onClick={() => copyColorToClipboard(palette.accentColor)}\n                      title={`انقر لنسخ: ${palette.accentColor}`}\n                    ></div>\n                    <p className=\"text-white font-mono text-sm\">{palette.accentColor}</p>\n                  </div>\n                </div>\n\n                {/* Theme Info */}\n                <div className=\"mt-4 p-3 bg-white/5 rounded-lg\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Eye className=\"w-4 h-4 text-[var(--color-primary)]\" />\n                    <span className=\"text-sm font-medium text-white\">معلومات الموضوع</span>\n                  </div>\n                  <div className=\"space-y-1 text-xs text-white/70\">\n                    <p>لون النص: {palette.textColor}</p>\n                    <p>نوع الموضوع: {palette.brightness > 128 ? 'فاتح' : 'داكن'}</p>\n                    <p>تم استخراج {palette.palette.length} ألوان</p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Loading State */}\n            {loading && !palette && (\n              <div className=\"flex flex-col items-center py-8\">\n                <div className=\"w-8 h-8 border-2 border-[var(--color-primary)] border-t-transparent rounded-full animate-spin mb-3\"></div>\n                <p className=\"text-white/70 text-sm\">جارٍ استخراج الألوان...</p>\n              </div>\n            )}\n\n            {/* No Palette State */}\n            {!loading && !palette && !error && (\n              <div className=\"text-center py-8\">\n                <Palette className=\"w-12 h-12 text-white/30 mx-auto mb-3\" />\n                <p className=\"text-white/70 text-sm mb-4\">انقر على \"تحديث الألوان\" لاستخراج ألوان من صورة Discord الشخصية</p>\n                <button\n                  onClick={handleRefresh}\n                  className=\"px-4 py-2 bg-gradient-to-r from-[var(--color-primary)] to-[var(--color-accent)] rounded-lg text-white text-sm hover:scale-105 transition-transform\"\n                >\n                  استخراج الألوان\n                </button>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Status Indicator */}\n        {palette && (\n          <div className=\"absolute -top-2 -left-2 w-4 h-4 bg-green-500 border-2 border-black rounded-full animate-pulse\"></div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":8340},"client/src/components/DynamicApp.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { MessageCircle, Instagram, Crown, User, Mail, ExternalLink, MapPin, Calendar, Clock, Globe, Star, Heart, Gamepad2, Eye, Zap } from 'lucide-react';\nimport { useDiscordAvatar } from '../hooks/useUserData';\nimport { useDynamicTheme } from '../contexts/DynamicThemeContext';\n\n\n\nexport default function DynamicApp() {\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [activeSection, setActiveSection] = useState('welcome');\n  const [showWelcome, setShowWelcome] = useState(true);\n  const [avatarError, setAvatarError] = useState(false);\n\n  \n  // Fetch Discord avatar dynamically with correct user ID\n  const { avatar, loading: avatarLoading, refreshAvatar } = useDiscordAvatar();\n  const { palette, loading: themeLoading } = useDynamicTheme();\n  const avatarUrl = avatar?.avatarUrl || \"/e9c4e804b0c546262bd2bc03f593648d.jpg\";\n\n  // Add manual refresh on click\n  const handleAvatarClick = () => {\n    refreshAvatar();\n  };\n\n\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    // Auto transition from welcome screen after 4 seconds\n    const welcomeTimer = setTimeout(() => {\n      setShowWelcome(false);\n      setActiveSection('about');\n    }, 4000);\n\n    return () => {\n      clearInterval(timer);\n      clearTimeout(welcomeTimer);\n    };\n  }, []);\n\n  const socialLinks = [\n    { \n      name: 'Discord', \n      icon: MessageCircle, \n      url: 'https://discord.com/users/1c.2', \n      color: 'dynamic-hover',\n      description: 'Connect in the Digital Realm',\n      username: '1c.2'\n    },\n    { \n      name: 'Instagram', \n      icon: Instagram, \n      url: 'https://www.instagram.com/lordx679', \n      color: 'dynamic-hover',\n      description: 'Witness the Journey',\n      username: '@lordx679'\n    },\n    { \n      name: 'Roblox', \n      icon: Gamepad2, \n      url: 'https://www.roblox.com/users/profile?username=aoufabok', \n      color: 'dynamic-hover',\n      description: 'Enter My Domain',\n      username: 'aoufabok'\n    },\n  ];\n\n  const contactMethods = [\n    {\n      icon: MessageCircle,\n      title: 'The Inner Sanctum',\n      value: '1c.2',\n      description: 'A direct conduit to the core of my design.',\n      color: 'dynamic-gradient-2',\n      url: 'https://discord.com/users/1c.2'\n    },\n    {\n      icon: Instagram,\n      title: 'Illusory Facades',\n      value: '@lordx679',\n      description: 'Observe the carefully crafted reality I present to the world.',\n      color: 'dynamic-gradient-2',\n      url: 'https://www.instagram.com/lordx679'\n    },\n    {\n      icon: Mail,\n      title: 'The Scribe\\'s Sigil',\n      value: 'ibraff739@gmail.com',\n      description: 'For matters requiring a traditional seal of exchange.',\n      color: 'dynamic-gradient-2',\n      url: 'mailto:ibraff739@gmail.com'\n    },\n    {\n      icon: Gamepad2,\n      title: 'The Proving Grounds',\n      value: 'aoufabok',\n      description: 'A dimension where concepts are tested and dominance is forged.',\n      color: 'dynamic-gradient-2',\n      url: 'https://www.roblox.com/users/profile?username=aoufabok'\n    }\n  ];\n\n  const domains = [\n    { \n      category: 'Digital Mastery', \n      items: ['Causal Manipulation', 'System Architecture', 'Network Orchestration', 'Conceptual Dominion'], \n      icon: Zap, \n      color: 'dynamic-glass',\n      accent: 'dynamic-text-primary'\n    },\n    { \n      category: 'Social Engineering', \n      items: ['Cultivation of Allegiance', 'Narrative Control', 'Influence Networks', 'Calculated Omnipresence'], \n      icon: Eye, \n      color: 'dynamic-glass',\n      accent: 'dynamic-text-primary'\n    },\n    { \n      category: 'Cultural Intelligence', \n      items: ['Strategic Analysis', 'Pattern Recognition', 'Ideological Navigation', 'Precognitive Strategy'], \n      icon: Crown, \n      color: 'dynamic-glass',\n      accent: 'dynamic-text-primary'\n    },\n  ];\n\n  // Get current time in Italy\n  const italyTime = new Date().toLocaleString('en-US', {\n    timeZone: 'Europe/Rome',\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true\n  });\n\n  const isOnline = () => {\n    const now = new Date();\n    const italyHour = parseInt(new Date().toLocaleString('en-US', {\n      timeZone: 'Europe/Rome',\n      hour: '2-digit',\n      hour12: false\n    }));\n    const day = now.getDay(); // 0 = Sunday, 1 = Monday, etc.\n    \n    // More relaxed online hours for personal site\n    if (day === 0) return italyHour >= 12 && italyHour < 23; // Sunday\n    if (day === 6) return italyHour >= 10 && italyHour < 24; // Saturday\n    return italyHour >= 8 && italyHour < 23; // Monday-Friday\n  };\n\n  // Welcome Screen - Dynamic LORD Style\n  if (showWelcome) {\n    return (\n      <div className=\"min-h-screen bg-black flex items-center justify-center relative overflow-hidden\">\n        {/* Dynamic Background Effects */}\n        <div className=\"absolute inset-0\">\n          <div className=\"absolute inset-0 bg-black\"></div>\n          \n          {/* Dynamic Energy Particles */}\n          <div className=\"absolute top-1/4 left-1/4 w-2 h-2 dynamic-bg-primary rounded-full animate-ping opacity-70 dynamic-shadow-primary\"></div>\n          <div className=\"absolute top-3/4 right-1/3 w-1 h-1 dynamic-bg-primary rounded-full animate-pulse opacity-60 dynamic-shadow-primary\"></div>\n          <div className=\"absolute bottom-1/3 left-1/2 w-3 h-3 dynamic-bg-primary rounded-full animate-bounce opacity-50 dynamic-shadow-primary\"></div>\n          <div className=\"absolute top-1/2 right-1/4 w-1 h-1 dynamic-bg-primary rounded-full animate-ping opacity-80 dynamic-shadow-primary\"></div>\n          \n          {/* Dynamic Aura Effects */}\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 dynamic-bg-primary-opacity rounded-full blur-3xl animate-pulse\"></div>\n          <div className=\"absolute top-1/3 right-1/4 w-64 h-64 dynamic-bg-primary-opacity rounded-full blur-2xl animate-pulse delay-1000\"></div>\n          <div className=\"absolute bottom-1/4 left-1/3 w-48 h-48 dynamic-bg-primary-opacity rounded-full blur-xl animate-pulse delay-2000\"></div>\n        </div>\n\n        {/* Divine Presence Content */}\n        <div className=\"relative z-10 text-center\">\n          {/* Dynamic Crown Icon */}\n          <div className=\"mb-8 relative\">\n            <div className=\"w-32 h-32 mx-auto mb-6 relative\">\n              <Crown className=\"w-full h-full dynamic-text-primary drop-shadow-2xl animate-pulse dynamic-shadow-primary\" />\n              <div className=\"absolute -top-2 -right-2 w-8 h-8 dynamic-bg-primary rounded-full animate-ping dynamic-shadow-primary\"></div>\n              <div className=\"absolute -bottom-2 -left-2 w-6 h-6 dynamic-bg-primary rounded-full animate-pulse delay-500 dynamic-shadow-primary\"></div>\n              <div className=\"absolute inset-0 dynamic-bg-primary-opacity rounded-full blur-xl animate-pulse\"></div>\n            </div>\n          </div>\n\n          {/* Dynamic Proclamation */}\n          <div className=\"space-y-8\">\n            <h1 className=\"text-7xl lg:text-9xl font-black text-white drop-shadow-2xl animate-pulse dynamic-glow-primary\">\n              I AM\n            </h1>\n            <div className=\"flex items-center justify-center space-x-6 text-5xl lg:text-8xl font-black\">\n              <div className=\"relative\">\n                <span className=\"dynamic-text-primary animate-pulse delay-500 dynamic-glow-primary\">\n                  LORD\n                </span>\n                <div className=\"absolute -top-2 -right-2 w-4 h-4 dynamic-bg-primary rounded-full animate-ping dynamic-shadow-primary\"></div>\n              </div>\n            </div>\n            <h2 className=\"text-4xl lg:text-6xl font-bold text-white/90 animate-pulse delay-700 dynamic-glow-accent\">\n              Architect of the Future\n            </h2>\n          </div>\n\n          {/* Dynamic Loading Animation */}\n          <div className=\"mt-16\">\n            <div className=\"w-80 h-1 bg-gray-800 rounded-full mx-auto overflow-hidden\">\n              <div className=\"h-full dynamic-gradient-2 rounded-full animate-pulse transform origin-left scale-x-0 animate-[scaleX_4s_ease-in-out_forwards] dynamic-shadow-primary\"></div>\n            </div>\n            <p className=\"text-white/70 text-lg mt-6 animate-pulse delay-1000 dynamic-glow-accent\">\n              {palette ? 'تطبيق الألوان الديناميكية...' : 'Transcending the Conventional...'}\n            </p>\n            {themeLoading && (\n              <div className=\"flex items-center justify-center space-x-2 mt-4\">\n                <div className=\"w-2 h-2 dynamic-bg-primary rounded-full animate-bounce\"></div>\n                <div className=\"w-2 h-2 dynamic-bg-accent rounded-full animate-bounce delay-100\"></div>\n                <div className=\"w-2 h-2 dynamic-bg-primary rounded-full animate-bounce delay-200\"></div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Dynamic Border Effects */}\n        <div className=\"absolute top-0 left-0 w-full h-1 dynamic-gradient-1 animate-pulse dynamic-shadow-primary\"></div>\n        <div className=\"absolute bottom-0 left-0 w-full h-1 dynamic-gradient-1 animate-pulse delay-500 dynamic-shadow-primary\"></div>\n        <div className=\"absolute top-0 left-0 w-1 h-full dynamic-gradient-1 animate-pulse delay-1000 dynamic-shadow-primary\"></div>\n        <div className=\"absolute top-0 right-0 w-1 h-full dynamic-gradient-1 animate-pulse delay-1500 dynamic-shadow-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black text-white relative overflow-hidden\">\n      {/* Dynamic Realm Background */}\n      <div className=\"fixed inset-0\">\n        <div className=\"absolute inset-0 bg-black\"></div>\n        <div className=\"absolute top-1/2 right-1/4 w-96 h-96 dynamic-bg-primary-opacity rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute bottom-1/4 left-1/3 w-64 h-64 dynamic-bg-primary-opacity rounded-full blur-2xl animate-pulse delay-1000\"></div>\n        <div className=\"absolute top-1/4 left-1/2 w-32 h-32 dynamic-bg-primary-opacity rounded-full blur-xl animate-pulse delay-2000\"></div>\n        <div className=\"absolute inset-0 bg-gradient-to-b from-transparent via-black/50 to-transparent\"></div>\n      </div>\n\n      {/* Dynamic Command Interface */}\n      <nav className=\"fixed top-0 left-0 right-0 z-50 bg-black/95 backdrop-blur-md dynamic-border-primary border-b-2 dynamic-shadow-primary\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-20\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 dynamic-gradient-2 rounded-2xl flex items-center justify-center relative dynamic-shadow-primary dynamic-border-primary border-2\">\n                <Crown className=\"h-7 w-7 text-white\" />\n                <div className=\"absolute -top-1 -right-1 w-4 h-4 dynamic-bg-primary rounded-full animate-ping dynamic-shadow-primary border border-white/30\"></div>\n                <div className=\"absolute inset-0 dynamic-bg-primary-opacity rounded-2xl blur-lg\"></div>\n              </div>\n              <span className=\"text-3xl font-black text-white dynamic-glow-primary\">LORD</span>\n            </div>\n            <div className=\"flex items-center space-x-8\">\n              {[\n                { key: 'about', label: 'Domain' },\n                { key: 'connect', label: 'Interface' }\n              ].map((section) => (\n                <button\n                  key={section.key}\n                  onClick={() => setActiveSection(section.key)}\n                  className={`text-lg font-bold transition-all duration-300 relative ${\n                    activeSection === section.key \n                      ? 'dynamic-text-primary dynamic-border-primary border-b-2' \n                      : 'text-white/70 dynamic-hover'\n                  }`}\n                >\n                  {section.label}\n                  {activeSection === section.key && (\n                    <div className=\"absolute -top-1 left-1/2 transform -translate-x-1/2 w-2 h-2 dynamic-bg-primary rounded-full animate-ping dynamic-shadow-primary\"></div>\n                  )}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Main Content */}\n      <main className=\"pt-16 relative z-10\">\n        {/* Domain Section - LORD's Realm */}\n        {activeSection === 'about' && (\n          <div className=\"min-h-screen flex items-center justify-center px-6 py-24\">\n            <div className=\"max-w-6xl mx-auto\">\n              <div className=\"text-center mb-20\">\n                <div className=\"mb-12\">\n                  <div className=\"w-40 h-40 mx-auto mb-12 relative\">\n                    <div className=\"w-full h-full dynamic-gradient-2 rounded-3xl p-2 animate-pulse dynamic-shadow-primary dynamic-border-primary border-4\">\n                      <div className=\"w-full h-full bg-black rounded-2xl flex items-center justify-center overflow-hidden relative dynamic-border-accent border-3\">\n                        {/* Avatar Image */}\n                        {!avatarError ? (\n                          <img \n                            src={avatarUrl} \n                            alt=\"LORD Profile Avatar\"\n                            className=\"w-full h-full object-cover rounded-2xl transition-all duration-300\"\n                            onLoad={() => {\n                              console.log('Avatar loaded successfully');\n                              setAvatarError(false);\n                            }}\n                            onError={(e) => {\n                              console.log('Avatar failed to load, showing crown fallback');\n                              setAvatarError(true);\n                            }}\n                          />\n                        ) : (\n                          /* Crown Fallback */\n                          <Crown className=\"h-20 w-20 dynamic-text-primary dynamic-shadow-primary\" />\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"absolute -bottom-3 -right-3 w-12 h-12 dynamic-gradient-2 rounded-full flex items-center justify-center animate-pulse dynamic-shadow-primary\">\n                      <div className=\"w-4 h-4 bg-white rounded-full\"></div>\n                    </div>\n                    <div className=\"absolute inset-0 dynamic-bg-primary-opacity rounded-full blur-2xl animate-pulse\"></div>\n                  </div>\n                  \n                  <h1 className=\"text-6xl lg:text-8xl font-black text-white mb-6 drop-shadow-2xl dynamic-glow-primary\">\n                    I am <span className=\"dynamic-text-primary\">LORD</span>\n                  </h1>\n                  <p className=\"text-2xl lg:text-3xl text-white/80 mb-8 dynamic-glow-accent\">\n                    Architect of the Future\n                  </p>\n\n                  {/* Identity Matrix */}\n                  <div className=\"flex flex-wrap justify-center gap-8 text-lg text-white/90 mb-12\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 dynamic-bg-primary rounded-full animate-pulse\"></div>\n                      <span className=\"dynamic-text-primary font-bold\">Alias:</span>\n                      <span>LORDX679</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 dynamic-bg-primary rounded-full animate-pulse\"></div>\n                      <span className=\"dynamic-text-primary font-bold\">Objective:</span>\n                      <span>Transcend the Conventional</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 dynamic-bg-primary rounded-full animate-pulse\"></div>\n                      <span className=\"dynamic-text-primary font-bold\">Domain:</span>\n                      <span>The Digital Realm</span>\n                    </div>\n                  </div>\n                  \n\n\n\n                  \n\n\n\n                </div>\n\n                {/* The Truth Beyond Perception */}\n                <div className=\"mb-16\">\n                  <div className=\"dynamic-glass rounded-3xl p-8 dynamic-shadow-primary dynamic-border-primary border-2\">\n                    <div className=\"flex items-center justify-center mb-6\">\n                      <Eye className=\"w-8 h-8 dynamic-text-primary mr-3\" />\n                      <h2 className=\"text-3xl font-bold text-white dynamic-glow-primary\">The Truth Beyond Perception</h2>\n                    </div>\n                    \n                    <div className=\"space-y-6 text-white/80 text-lg leading-relaxed\">\n                      <p className=\"text-center italic\">\n                        \"The reality you perceive in the digital world is merely a single facet of what is possible. I stand at the \n                        precipice of what comes next, shaping the very fabric of our future interactions.\"\n                      </p>\n                      \n                      <p className=\"text-center\">\n                        \"Admiration is the emotion furthest from understanding. Do not seek to understand my path, but rather, \n                        witness the results.\"\n                      </p>\n                      \n                      <div className=\"dynamic-glass rounded-2xl p-6 dynamic-border-accent border-2 text-center\">\n                        <p className=\"dynamic-text-accent font-medium\">\n                          \"The throne in the sky has been vacant for far too long. Let's connect, and I will show you what true \n                          potential looks like.\"\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Core Logic */}\n                <div className=\"mb-16\">\n                  <div className=\"dynamic-glass rounded-3xl p-8 dynamic-shadow-primary dynamic-border-primary border-2\">\n                    <div className=\"flex items-center justify-center mb-8\">\n                      <Zap className=\"w-8 h-8 dynamic-text-primary mr-3\" />\n                      <h2 className=\"text-3xl font-bold text-white dynamic-glow-primary\">Core Logic</h2>\n                    </div>\n                    \n                    <p className=\"text-center text-white/80 text-lg mb-8 italic\">\n                      I perceive the digital world not as a series of applications and firewalls, but as a complex web of systems \n                      waiting for a guiding hand. My craft lies in understanding and influencing these systems at their most \n                      fundamental level. What others call a vulnerability, I call an invitation.\n                    </p>\n                    \n                    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                      <div className=\"dynamic-glass rounded-2xl p-6 dynamic-border-accent border-2 text-center\">\n                        <h3 className=\"text-xl font-bold dynamic-text-primary mb-3\">Discord Automation & Intelligence</h3>\n                        <p className=\"text-white/70\">\n                          Engineering autonomous entities that govern, gather, and execute commands within Discord's ecosystem. They \n                          are not bots; they are extensions of my will.\n                        </p>\n                      </div>\n                      \n                      <div className=\"dynamic-glass rounded-2xl p-6 dynamic-border-accent border-2 text-center\">\n                        <h3 className=\"text-xl font-bold dynamic-text-primary mb-3\">Offensive Security & System Analysis</h3>\n                        <p className=\"text-white/70\">\n                          The art of dismantling digital constructs to understand their core. I develop tools that test the limits of security, \n                          revealing the inherent fragility in all man-made systems.\n                        </p>\n                      </div>\n                      \n                      <div className=\"dynamic-glass rounded-2xl p-6 dynamic-border-accent border-2 text-center\">\n                        <h3 className=\"text-xl font-bold dynamic-text-primary mb-3\">Web & Network Architecture</h3>\n                        <p className=\"text-white/70\">\n                          Building and deconstructing the very fabric of the web. I create intricate domains and possess the knowledge to \n                          navigate—or disable—the pathways of others.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Enter Domain Button */}\n                <div className=\"text-center\">\n                  <button \n                    onClick={() => setActiveSection('connect')}\n                    className=\"dynamic-button px-12 py-4 text-xl font-bold text-white rounded-2xl transition-all duration-300 hover:scale-105 dynamic-shadow-primary\"\n                  >\n                    Enter My Domain\n                  </button>\n                </div>\n\n                {/* Domain Powers Grid */}\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-16\">\n                  {domains.map((domain, index) => (\n                    <div key={domain.category} \n                         className={`${domain.color} rounded-3xl p-8 hover:scale-105 transition-all duration-500 dynamic-shadow-primary`}>\n                      <div className=\"flex items-center justify-center mb-6\">\n                        <div className=\"w-16 h-16 dynamic-gradient-2 rounded-2xl flex items-center justify-center dynamic-shadow-accent\">\n                          <domain.icon className=\"w-8 h-8 text-white\" />\n                        </div>\n                      </div>\n                      <h3 className={`text-2xl font-bold text-white mb-6 text-center ${domain.accent}`}>\n                        {domain.category}\n                      </h3>\n                      <ul className=\"space-y-3\">\n                        {domain.items.map((item, itemIndex) => (\n                          <li key={itemIndex} className=\"flex items-center space-x-3 text-white/80\">\n                            <div className=\"w-2 h-2 dynamic-bg-primary rounded-full dynamic-pulse-primary\"></div>\n                            <span className=\"text-sm font-medium dynamic-hover\">{item}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Core Logic Section */}\n                <div className=\"dynamic-glass rounded-3xl p-12 dynamic-shadow-primary\">\n                  <h2 className=\"text-4xl font-bold text-white mb-8 text-center dynamic-glow-primary\">\n                    Core Logic Architecture\n                  </h2>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n                    <div className=\"text-center space-y-4\">\n                      <div className=\"w-16 h-16 dynamic-gradient-2 rounded-2xl flex items-center justify-center mx-auto dynamic-shadow-accent\">\n                        <MessageCircle className=\"w-8 h-8 text-white\" />\n                      </div>\n                      <h3 className=\"text-xl font-bold dynamic-text-primary\">Discord Automation & Intelligence</h3>\n                      <p className=\"text-white/70 text-sm\">\n                        Advanced automation systems for seamless digital interaction and intelligent response protocols.\n                      </p>\n                    </div>\n                    <div className=\"text-center space-y-4\">\n                      <div className=\"w-16 h-16 dynamic-gradient-2 rounded-2xl flex items-center justify-center mx-auto dynamic-shadow-accent\">\n                        <Eye className=\"w-8 h-8 text-white\" />\n                      </div>\n                      <h3 className=\"text-xl font-bold dynamic-text-primary\">Offensive Security & System Analysis</h3>\n                      <p className=\"text-white/70 text-sm\">\n                        Comprehensive security analysis and systematic vulnerability assessment methodologies.\n                      </p>\n                    </div>\n                    <div className=\"text-center space-y-4\">\n                      <div className=\"w-16 h-16 dynamic-gradient-2 rounded-2xl flex items-center justify-center mx-auto dynamic-shadow-accent\">\n                        <Globe className=\"w-8 h-8 text-white\" />\n                      </div>\n                      <h3 className=\"text-xl font-bold dynamic-text-primary\">Web & Network Architecture</h3>\n                      <p className=\"text-white/70 text-sm\">\n                        Sophisticated web development and network infrastructure design with modern frameworks.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Interface Section - The Veiled Nexus */}\n        {activeSection === 'connect' && (\n          <div className=\"min-h-screen flex items-center justify-center px-6 py-24\">\n            <div className=\"max-w-4xl mx-auto\">\n              <div className=\"text-center mb-16\">\n                <h1 className=\"text-6xl lg:text-8xl font-black text-white mb-6 dynamic-glow-primary\">\n                  The Veiled <span className=\"dynamic-text-primary\">Nexus</span>\n                </h1>\n                <p className=\"text-2xl text-white/80 mb-8 dynamic-glow-accent\">\n                  Where consciousness converges with the digital realm\n                </p>\n                <div className=\"w-32 h-1 dynamic-gradient-2 mx-auto rounded-full dynamic-shadow-primary\"></div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                {contactMethods.map((method, index) => (\n                  <a\n                    key={index}\n                    href={method.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"dynamic-glass rounded-3xl p-8 hover:scale-105 transition-all duration-500 dynamic-shadow-primary group\"\n                  >\n                    <div className=\"flex items-start space-x-6\">\n                      <div className={`w-16 h-16 ${method.color} rounded-2xl flex items-center justify-center flex-shrink-0 group-hover:scale-110 transition-transform dynamic-shadow-accent`}>\n                        <method.icon className=\"w-8 h-8 text-white\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-xl font-bold text-white mb-2 dynamic-text-primary group-hover:dynamic-glow-primary transition-all\">\n                          {method.title}\n                        </h3>\n                        <p className=\"dynamic-text-accent text-lg font-mono mb-3 group-hover:text-white transition-colors\">\n                          {method.value}\n                        </p>\n                        <p className=\"text-white/70 text-sm leading-relaxed\">\n                          {method.description}\n                        </p>\n                      </div>\n                      <ExternalLink className=\"w-5 h-5 text-white/50 group-hover:dynamic-text-primary transition-colors\" />\n                    </div>\n                  </a>\n                ))}\n              </div>\n\n              <div className=\"mt-16 text-center\">\n                <div className=\"dynamic-glass rounded-2xl p-8 dynamic-shadow-primary\">\n                  <p className=\"text-white/80 text-lg italic dynamic-glow-accent\">\n                    \"The only true wisdom is in knowing you know nothing. <br />\n                    But for me, knowing everything is just the beginning.\"\n                  </p>\n                  <div className=\"flex items-center justify-center mt-6 space-x-3\">\n                    <div className=\"w-8 h-8 dynamic-gradient-2 rounded-full flex items-center justify-center dynamic-shadow-accent\">\n                      <Crown className=\"w-4 h-4 text-white\" />\n                    </div>\n                    <span className=\"dynamic-text-primary font-bold\">- LORD</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </main>\n\n    </div>\n  );\n}","size_bytes":28560},"client/src/contexts/DynamicThemeContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useColorThief, type ColorPalette } from '../hooks/useColorThief';\nimport { useDiscordAvatar } from '../hooks/useUserData';\n\ninterface DynamicThemeContextType {\n  palette: ColorPalette | null;\n  loading: boolean;\n  error: string | null;\n  refreshColors: () => Promise<void>;\n  applyTheme: (palette: ColorPalette) => void;\n  resetTheme: () => void;\n}\n\nconst DynamicThemeContext = createContext<DynamicThemeContextType | undefined>(undefined);\n\nexport function useDynamicTheme() {\n  const context = useContext(DynamicThemeContext);\n  if (!context) {\n    throw new Error('useDynamicTheme must be used within a DynamicThemeProvider');\n  }\n  return context;\n}\n\ninterface DynamicThemeProviderProps {\n  children: ReactNode;\n}\n\nexport function DynamicThemeProvider({ children }: DynamicThemeProviderProps) {\n  const { palette, loading: colorLoading, error, extractColors, clearPalette } = useColorThief();\n  const { avatar, loading: avatarLoading } = useDiscordAvatar();\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  // Apply theme to CSS custom properties\n  const applyTheme = (colorPalette: ColorPalette) => {\n    const root = document.documentElement;\n    \n    // Primary color (dominant)\n    root.style.setProperty('--color-primary', colorPalette.dominant);\n    root.style.setProperty('--color-primary-rgb', hexToRgb(colorPalette.dominant));\n    \n    // Accent color\n    root.style.setProperty('--color-accent', colorPalette.accentColor);\n    root.style.setProperty('--color-accent-rgb', hexToRgb(colorPalette.accentColor));\n    \n    // Text color\n    root.style.setProperty('--color-text-primary', colorPalette.textColor);\n    \n    // Background gradients based on palette\n    if (colorPalette.palette.length >= 3) {\n      root.style.setProperty('--bg-gradient-1', colorPalette.palette[0]);\n      root.style.setProperty('--bg-gradient-2', colorPalette.palette[1]);\n      root.style.setProperty('--bg-gradient-3', colorPalette.palette[2]);\n    }\n    \n    // Dynamic background with opacity based on brightness\n    const bgOpacity = colorPalette.brightness > 150 ? '0.15' : '0.25';\n    root.style.setProperty('--bg-primary-opacity', bgOpacity);\n    \n    // Shadow colors\n    root.style.setProperty('--shadow-primary', `${colorPalette.dominant}40`);\n    root.style.setProperty('--shadow-accent', `${colorPalette.accentColor}60`);\n    \n    // Border colors\n    root.style.setProperty('--border-primary', `${colorPalette.dominant}50`);\n    root.style.setProperty('--border-accent', `${colorPalette.accentColor}70`);\n  };\n\n  // Reset theme to default\n  const resetTheme = () => {\n    const root = document.documentElement;\n    \n    // Reset to default blue theme\n    root.style.setProperty('--color-primary', '#007BFF');\n    root.style.setProperty('--color-primary-rgb', '0, 123, 255');\n    root.style.setProperty('--color-accent', '#0056CC');\n    root.style.setProperty('--color-accent-rgb', '0, 86, 204');\n    root.style.setProperty('--color-text-primary', '#ffffff');\n    root.style.setProperty('--bg-gradient-1', '#007BFF');\n    root.style.setProperty('--bg-gradient-2', '#0099FF');\n    root.style.setProperty('--bg-gradient-3', '#0056CC');\n    root.style.setProperty('--bg-primary-opacity', '0.2');\n    root.style.setProperty('--shadow-primary', '#007BFF40');\n    root.style.setProperty('--shadow-accent', '#0056CC60');\n    root.style.setProperty('--border-primary', '#007BFF50');\n    root.style.setProperty('--border-accent', '#0056CC70');\n    \n    clearPalette();\n  };\n\n  // Helper function to convert hex to RGB\n  const hexToRgb = (hex: string): string => {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    if (result) {\n      return `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}`;\n    }\n    return '0, 0, 0';\n  };\n\n  // Refresh colors from current avatar\n  const refreshColors = async () => {\n    if (!avatar?.avatarUrl) return;\n    \n    try {\n      const newPalette = await extractColors(avatar.avatarUrl);\n      applyTheme(newPalette);\n    } catch (err) {\n      console.error('Failed to refresh colors:', err);\n    }\n  };\n\n  // Auto-extract colors when avatar changes\n  useEffect(() => {\n    if (avatar?.avatarUrl && !avatarLoading) {\n      if (!isInitialized) {\n        // Initial load - extract colors immediately\n        extractColors(avatar.avatarUrl)\n          .then((newPalette) => {\n            applyTheme(newPalette);\n            setIsInitialized(true);\n          })\n          .catch((err) => {\n            console.error('Failed to extract initial colors:', err);\n            setIsInitialized(true);\n          });\n      } else {\n        // Subsequent updates - small delay for smooth transition\n        const timer = setTimeout(() => {\n          refreshColors();\n        }, 500);\n        \n        return () => clearTimeout(timer);\n      }\n    }\n  }, [avatar?.avatarUrl, avatarLoading, isInitialized]);\n\n  // Apply theme when palette changes\n  useEffect(() => {\n    if (palette) {\n      applyTheme(palette);\n    }\n  }, [palette]);\n\n  const contextValue: DynamicThemeContextType = {\n    palette,\n    loading: colorLoading || avatarLoading,\n    error,\n    refreshColors,\n    applyTheme,\n    resetTheme\n  };\n\n  return (\n    <DynamicThemeContext.Provider value={contextValue}>\n      {children}\n    </DynamicThemeContext.Provider>\n  );\n}","size_bytes":5424},"client/src/hooks/useColorThief.ts":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport ColorThief from 'colorthief';\n\nexport interface ColorPalette {\n  dominant: string;\n  palette: string[];\n  brightness: number;\n  textColor: string;\n  accentColor: string;\n}\n\nexport function useColorThief() {\n  const [palette, setPalette] = useState<ColorPalette | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Helper function to convert RGB array to hex\n  const rgbToHex = (rgb: number[]): string => {\n    return \"#\" + rgb.map(x => {\n      const hex = x.toString(16);\n      return hex.length === 1 ? \"0\" + hex : hex;\n    }).join(\"\");\n  };\n\n  // Helper function to calculate brightness\n  const getBrightness = (rgb: number[]): number => {\n    return (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n  };\n\n  // Helper function to get contrasting text color\n  const getTextColor = (brightness: number): string => {\n    return brightness > 128 ? '#000000' : '#ffffff';\n  };\n\n  // Helper function to get accent color (lighter/darker variant)\n  const getAccentColor = (rgb: number[]): string => {\n    const brightness = getBrightness(rgb);\n    const factor = brightness > 128 ? 0.7 : 1.3; // Darken if bright, lighten if dark\n    \n    const accentRgb = rgb.map(channel => \n      Math.min(255, Math.max(0, Math.round(channel * factor)))\n    );\n    \n    return rgbToHex(accentRgb);\n  };\n\n  const extractColors = useCallback(async (imageUrl: string): Promise<ColorPalette> => {\n    return new Promise((resolve, reject) => {\n      setLoading(true);\n      setError(null);\n\n      const img = new Image();\n      img.crossOrigin = 'anonymous';\n      \n      img.onload = () => {\n        try {\n          const colorThief = new ColorThief();\n          \n          // Get dominant color\n          const dominantColor = colorThief.getColor(img);\n          const dominantHex = rgbToHex(dominantColor);\n          \n          // Get color palette (5 colors)\n          const colorPalette = colorThief.getPalette(img, 5);\n          const paletteHex = colorPalette.map((color: number[]) => rgbToHex(color));\n          \n          // Calculate brightness\n          const brightness = getBrightness(dominantColor);\n          \n          // Get text and accent colors\n          const textColor = getTextColor(brightness);\n          const accentColor = getAccentColor(dominantColor);\n          \n          const result: ColorPalette = {\n            dominant: dominantHex,\n            palette: paletteHex,\n            brightness,\n            textColor,\n            accentColor\n          };\n          \n          setPalette(result);\n          setLoading(false);\n          resolve(result);\n        } catch (err) {\n          const errorMessage = err instanceof Error ? err.message : 'Failed to extract colors';\n          setError(errorMessage);\n          setLoading(false);\n          reject(new Error(errorMessage));\n        }\n      };\n      \n      img.onerror = () => {\n        const errorMessage = 'Failed to load image for color extraction';\n        setError(errorMessage);\n        setLoading(false);\n        reject(new Error(errorMessage));\n      };\n      \n      // Add timestamp to prevent caching issues\n      const timestamp = Date.now();\n      img.src = imageUrl.includes('?') \n        ? `${imageUrl}&colorThief=${timestamp}` \n        : `${imageUrl}?colorThief=${timestamp}`;\n    });\n  }, []);\n\n  // Clear current palette\n  const clearPalette = useCallback(() => {\n    setPalette(null);\n    setError(null);\n  }, []);\n\n  return {\n    palette,\n    loading,\n    error,\n    extractColors,\n    clearPalette\n  };\n}","size_bytes":3626}}}